{"version":3,"sources":["Work.js","Education.js","Projects.js","InfoContent.js","App.js","serviceWorker.js","index.js"],"names":["Work","react_default","a","createElement","Component","Education","Projects","InfoContent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onRef","assertThisInitialized","contents","work","src_Work","education","src_Education","projects","src_Projects","state","content","setContent","bind","className","contentValid","_arr","entries","_i","length","_ref3","_ref2","slicedToArray","Error","setState","App","src","alt","dist_default","speed","onClick","e","navItemClicked","infoContent","src_InfoContent","ref","event","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7c2ee26.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Work extends Component {\r\n\r\n  render() {\r\n    return <div><p>Work</p></div>;\r\n  }\r\n}\r\n\r\nexport default Work;","import React, { Component } from 'react';\r\n\r\nclass Education extends Component {\r\n\r\n  render() {\r\n    return <div><p>Education</p></div>;\r\n  }\r\n}\r\n\r\nexport default Education;","import React, { Component } from 'react';\r\n\r\nclass Projects extends Component {\r\n\r\n  render() {\r\n    return <div><p>Projects</p></div>;\r\n  }\r\n}\r\n\r\nexport default Projects;","import React, { Component } from 'react';\r\nimport Work from './Work';\r\nimport Education from './Education';\r\nimport Projects from './Projects';\r\n\r\nclass InfoContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    props.onRef(this);\r\n\r\n    this.contents = {\r\n      work: <Work />,\r\n      education: <Education />,\r\n      projects: <Projects />\r\n    };\r\n\r\n    this.state = {content: this.contents.work};\r\n    this.setContent = this.setContent.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.className}>\r\n        {this.state.content}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setContent(content) {\r\n    let contentValid = false;\r\n\r\n    for (let [key, value] of Object.entries(this.contents)){\r\n      if (content === value) {\r\n        contentValid = true;\r\n      }\r\n    }\r\n\r\n    if (!contentValid) {\r\n      throw Error('Invalid argument given, value from object contents in InfoContent expected');\r\n    }\r\n\r\n    this.setState({content: content});\r\n  }\r\n}\r\n\r\nexport default InfoContent;","import React, { Component } from 'react';\nimport Typing from 'react-typing-animation';\nimport InfoContent from './InfoContent';\nimport './App.css';\n\nclass App extends Component {\n   render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Mid\">\n          <div className=\"Header\">\n            <h1>Amtom Böglund</h1>\n          </div>\n          <div className=\"Welcome\">\n            <img \n              src=\"https://i.imgur.com/tOskIOX.png\" \n              alt=\"The cutest boi in town.\"\n              className=\"FadeIn ProfilePicture\">\n            </img>\n            <div className=\"Console\">\n              <Typing speed={50}>\n                <span className=\"TypeWriter\">\n                  Hei, rekry tylleröt ja poikerot, ottakaa mut töihin.\n                </span>\n              </Typing> \n            </div>\n          </div>\n          <div className=\"NavBar\">\n            <div \n              className=\"NavItem\"\n              onClick={(e) => \n                this.navItemClicked(e, this.infoContent.contents.work)}>\n              Työkokemus\n            </div>\n            <div \n              className=\"NavItem\"\n              onClick={(e) => \n                this.navItemClicked(e, this.infoContent.contents.education)}>\n              Koulutus\n            </div>\n            <div \n              className=\"NavItem\"\n              onClick={(e) => \n                this.navItemClicked(e, this.infoContent.contents.projects)}>\n              Projektit\n            </div>\n          </div>\n          <InfoContent\n            className=\"InfoContent\"\n            onRef={(ref) => this.infoContent = ref}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  navItemClicked(event, content) {\n    event.preventDefault();\n    \n    this.infoContent.setContent(content);\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}